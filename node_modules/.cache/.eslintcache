[{"/Users/plat0/Downloads/sorting-search/src/index.tsx":"1","/Users/plat0/Downloads/sorting-search/src/reportWebVitals.ts":"2","/Users/plat0/Downloads/sorting-search/src/App.tsx":"3","/Users/plat0/Downloads/sorting-search/src/components/NewDiv.tsx":"4"},{"size":500,"mtime":1636634294094,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1636634294096,"results":"7","hashOfConfig":"6"},{"size":366,"mtime":1642765924257,"results":"8","hashOfConfig":"6"},{"size":6132,"mtime":1654848996699,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bekjyh",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/plat0/Downloads/sorting-search/src/index.tsx",[],"/Users/plat0/Downloads/sorting-search/src/reportWebVitals.ts",[],"/Users/plat0/Downloads/sorting-search/src/App.tsx",[],"/Users/plat0/Downloads/sorting-search/src/components/NewDiv.tsx",["19","20"],"import React from \"react\";\nimport \"../components/NewDiv.css\";\n\ninterface cell {\n  currentNumber?: number; //значение ячейки\n  beginX: number; // left ячейки\n  beginY: number; // top ячейки\n  endX?: number; //конечная точка рамки по оси Х\n  endY?: number; //конечная точка рамки по оси Y\n  width?: number; //ширина рамки\n  height?: number; //высота рамки\n  isUnderline?: boolean;\n  pos?: number; // признак выделенности ячейки стиль\n}\n\ninterface IFieldProps {}\n\ninterface IFieldState {\n  isClicked?: boolean; //флаг клика\n  downActive: boolean; //флаг нажатия на ячейку\n  cells: cell[];\n  Compare: { LESS_THAN: -1; BIGGER_THAN: 1 }; //массив ячеек\n}\n\nlet search: any;\nlet first = 0; //left endpoint\nlet last = 14; //right endpoint\nlet found = false;\n\nexport default class Field extends React.Component<IFieldProps, IFieldState> {\n  constructor(props: IFieldProps) {\n    super(props);\n    this.state = {\n      isClicked: false,\n      downActive: false,\n      cells: [],\n      Compare: {\n        LESS_THAN: -1,\n        BIGGER_THAN: 1,\n      },\n    };\n  }\n  rendering() {\n    let array = [];\n    for (let i = 0; i < 15; i++) {\n      array[i] = {\n        currentNumber: Math.floor(Math.random() * 100),\n        beginX: i * 50 + 300,\n        beginY: 200,\n        width: 20,\n        height: 20,\n        pos: i,\n      };\n    }\n    this.setState({ cells: array });\n  }\n\n  changePlace() {\n    let i = 0;\n    let flag = 0;\n    let stop = 1;\n    this.bubbleSort(i, this.state.cells, flag, stop);\n  }\n\n  renderingSlow(arr: any) {\n    this.setState({ cells: arr });\n  }\n\n  increment(i: any) {\n    i++;\n  }\n\n  binarySearch(value: any, list: any, first: any, last: any, found: any) {\n    for (let i = 0; i< 14; i++ ) {\n      let element = document.querySelector(`.element${i}`);\n      (element! as HTMLElement).style.backgroundColor = \"white\";\n    }\n    \n\n     if (found === false && first <= last) {\n    for (let i = first; i< last; i++ ) {\n      let element = document.querySelector(`.element${i}`);\n      (element! as HTMLElement).style.backgroundColor = \"blue\";\n    }\n\n    let position = -1;\n    let found = false;\n    let middle;\n      middle = Math.floor((first + last) / 2);\n        let element = document.querySelector(`.element${middle}`);\n        (element! as HTMLElement).style.backgroundColor = \"red\";\n      if (list[middle].currentNumber == value) {\n        found = true;\n        position = middle;\n      } else if (list[middle].currentNumber > value) {\n        //if in lower half\n        last = middle - 1;\n        setTimeout(() => {\n          this.binarySearch(value, list, first, last, found);\n          console.log(\"pause\");\n        }, 2000);\n        \n      } else {\n        //in in upper half\n        first = middle + 1;\n        setTimeout(() => {\n          this.binarySearch(value, list, first, last, found);\n          console.log(\"pause\");\n        }, 2000);\n      }}\n  }\n\n  bubbleSort(i: any, arr: any, flag: any, stop: any) {\n    if (stop < 28) {\n    let elements = document.querySelectorAll(\".element\")\n    elements.forEach((el) => {\n      (el! as HTMLElement).style.backgroundColor = \"white\";\n    })\n    let arr2 = arr;\n    let j = i + 1;\n    let element = document.querySelector(`.element${i}`);\n    let element2 = document.querySelector(`.element${j}`);\n    if (j < 14) {\n    (element! as HTMLElement).style.backgroundColor = \"green\";\n    (element2! as HTMLElement).style.backgroundColor = \"green\";\n    }\n    if (i < 14 && flag < 14) {\n      if (arr2[i].currentNumber > arr2[j].currentNumber) {\n        stop = 1;\n        (element! as HTMLElement).style.backgroundColor = \"black\";\n        (element2! as HTMLElement).style.backgroundColor = \"black\";\n        let a = arr2[i].beginX;\n        let b = arr2[i].beginY;\n        let c = arr2[j].beginX;\n        let v = arr2[j].beginY;\n        let d = arr2[i].currentNumber;\n        arr2[i].beginX = a;\n        arr2[i].beginY = b;\n        arr2[i].currentNumber = arr2[j].currentNumber;\n        arr2[j].beginX = c;\n        arr2[j].beginY = v;\n        arr2[j].currentNumber = d;\n        console.log(arr[i], arr[j]);\n        setTimeout(() => {\n          this.bubbleSort(j, arr2, flag, stop);\n          console.log(\"pause\");\n        }, 500);\n      } else {\n        stop++;\n        console.log(\"net\");\n        setTimeout(() => {\n          this.bubbleSort(j, arr2, flag, stop);\n          console.log(\"pause\");\n        }, 500);\n      }\n    } else {\n      i = 0;\n      j = 0;\n      if (flag < 14 && flag === 0) {\n        setTimeout(() => {\n          this.bubbleSort(j, arr2, flag, stop);\n          console.log(\"pause\");\n        }, 500);\n      }\n    }\n  \n    this.setState({ cells: arr2 });\n  }}\n\n  componentDidMount() {\n    console.log(this.state.cells);\n    this.rendering();\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"NewDiv\">\n          <header className=\"App-header\">\n            <p>Сортировка массива и поиск элемента</p>\n          </header>\n          <div className=\"field\">\n            <button className=\"button\" onClick={this.changePlace.bind(this)}>\n              Поменять местами\n            </button>\n            <button className=\"button\" onClick={() => {this.binarySearch(prompt(search as any), this.state.cells, first, last, found)}}>\n              Выполнить поиск\n            </button>\n            {this.state.cells.map((cell, i) => {\n              return (\n                <>\n                  <div\n                    className={`element element${i}`}\n                    style={{\n                      position: \"fixed\",\n                      top: cell.beginY,\n                      left: cell.beginX,\n                      width: cell.width,\n                      height: cell.height,\n                    }}\n                  >\n                    <p className=\"number\">{cell.currentNumber}</p>\n                  </div>\n                </>\n              );\n            })}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n",{"ruleId":"21","severity":1,"message":"22","line":92,"column":38,"nodeType":"23","messageId":"24","endLine":92,"endColumn":40},{"ruleId":"25","severity":1,"message":"26","line":94,"column":9,"nodeType":"27","messageId":"28","endLine":94,"endColumn":17},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'position' is assigned a value but never used.","Identifier","unusedVar"]